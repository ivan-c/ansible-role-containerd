---
- name: Create
  hosts: localhost
  connection: local
  gather_facts: false
  # no_log: "{{ not (lookup('env', 'MOLECULE_DEBUG') | bool or molecule_yml.provisioner.log|default(false) | bool) }}"
  tasks:
    - name: Try creating molecule instance(s)
      block:
        - name: Create molecule instance(s)
          molecule_vagrant:
            instance_name: "{{ item.name }}"
            instance_interfaces: "{{ item.interfaces | default(omit) }}"
            instance_raw_config_args: "{{ item.instance_raw_config_args | default(omit) }}"

            config_options: "{{ item.config_options | default(omit) }}"

            platform_box: "{{ item.box }}"
            platform_box_version: "{{ item.box_version | default(omit) }}"
            platform_box_url: "{{ item.box_url | default(omit) }}"

            provider_name: "{{ molecule_yml.driver.provider.name }}"
            provider_memory: "{{ item.memory | default(omit) }}"
            provider_cpus: "{{ item.cpus | default(omit) }}"
            provider_options: "{{ item.provider_options | default(omit) }}"
            provider_raw_config_args: "{{ item.provider_raw_config_args | default(omit) }}"
            provider_override_args: "{{ item.provider_override_args | default(omit) }}"

            provision: "{{ item.provision | default(omit) }}"

            state: up
          with_items: "{{ molecule_yml.platforms }}"
          register: server

          # how long to wait for this task: 30 minutes
          # fail if timeout exceeded
          async: "{{ 1*60*10 }}"

        - name: check on vagrant up create
          async_status:
            # todo: fix looping
            jid: "{{ server.results[0].ansible_job_id }}"
          register: job_result
          until: job_result.finished
          retries: 15

        - name: Populate instance config dict
          set_fact:
            instance_conf_dict: {
              'instance': "{{ item.Host }}",
              'address': "{{ item.HostName }}",
              'user': "{{ item.User }}",
              'port': "{{ item.Port }}",
              'identity_file': "{{ item.IdentityFile }}",
            }
          with_items: "{{ server.results }}"
          register: instance_config_dict
          when: server.changed | bool

      rescue:
        # attempt recovery
        # read vagrant CLI output directly

        - name: get vagrant ssh-config
          command: vagrant ssh-config
          args:
            chdir: "{{ hostvars[inventory_hostname]['molecule_ephemeral_directory'] }}"
          register: vagrant_ssh_config
        - debug:
            var: vagrant_ssh_config

        - name: Populate instance config from `vagrant ssh-config` output
          set_fact:
            "{{ item.var_name }}": "{{ vagrant_ssh_config.stdout_lines | select('search', item.ssh_conf_var_name) | first | regex_replace('\\s*\\w+ (.+)', '\\1')  }}"
          loop:
            - {var_name: 'instance_conf__instance', ssh_conf_var_name: 'Host '}
            - {var_name: 'instance_conf__address', ssh_conf_var_name: 'HostName '}
            - {var_name: 'instance_conf__user', ssh_conf_var_name: 'User '}
            - {var_name: 'instance_conf__port', ssh_conf_var_name: 'Port '}
            - {var_name: 'instance_conf__identity_file', ssh_conf_var_name: 'IdentityFile '}

        - name: Populate instance config dict
          set_fact:
            instance_conf_dict: {
              'instance': "{{ instance_conf__instance }}",
              'address': "{{ instance_conf__address }}",
              'user': "{{ instance_conf__user }}",
              'port': "{{ instance_conf__port }}",
              'identity_file': "{{ instance_conf__identity_file }}",
              # correct vagrant-managed ssh key below
              # 'identity_file': "{{ hostvars[inventory_hostname]['molecule_ephemeral_directory'] }}/.vagrant/machines/instance/libvirt/private_key",
            }
          with_items: "{{ server.results }}"
          register: instance_config_dict

    # NOTE(retr0h): Vagrant/VBox sucks and parallelizing instance creation
    # causes issues.
    # Mandatory configuration for Molecule to function.

    - name: Convert instance config dict to a list
      set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"
      when: server.changed | bool

    - name: Dump instance config
      copy:
        content: "{{ instance_conf | to_json | from_json | molecule_to_yaml | molecule_header }}"
        dest: "{{ molecule_instance_config }}"
      when: server.changed | bool
